{"ast":null,"code":"var _jsxFileName = \"/Users/kharbaugh829/Documents/LaunchCode/FrontEndProject1/order-form/src/components/OrderForm/ContactInfo.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactInfo = props => {\n  _s();\n\n  const [enteredContactName, setEnteredContactName] = useState(\"\");\n  const [enteredContactPhoneNumber, setEnteredContactPhoneNumber] = useState(\"\");\n  const [enteredContactEmail, setEnteredContactEmail] = useState(\"\");\n  const [enteredContactNameIsValid, setEnteredContactNameIsValid] = useState(true);\n  const [enteredContactPhoneNumberIsValid, setEnteredContactPhoneNumberIsValid] = useState(true);\n  const [enteredContactEmailIsValid, setEnteredContactEmailIsValid] = useState(true);\n\n  const contactNameChangeHandler = event => {\n    let name = event.target.value;\n    setEnteredContactName(name);\n    props.update(\"contactInfo\", {\n      enteredContactName: name,\n      enteredContactEmail: enteredContactEmail,\n      enteredContactPhone: enteredContactPhoneNumber\n    });\n  };\n\n  const contactPhoneNumberChangeHandler = event => {\n    let phone = event.target.value;\n    setEnteredContactPhoneNumber(phone);\n    props.update(\"contactInfo\", {\n      enteredContactName: enteredContactName,\n      enteredContactEmail: enteredContactEmail,\n      enteredContactPhone: phone\n    });\n  };\n\n  const contactEmailChangeHandler = event => {\n    let email = event.target.value;\n    setEnteredContactEmail(email);\n    props.update(\"contactInfo\", {\n      enteredContactName: enteredContactName,\n      enteredContactEmail: email,\n      enteredContactPhone: enteredContactPhoneNumber\n    });\n  };\n\n  const onClickHandler = event => {\n    event.preventDefault();\n\n    if (!enteredContactName.trim() === '') {\n      setEnteredContactNameIsValid(true);\n      return;\n    }\n\n    if (!enteredContactPhoneNumber.trim() === '') {\n      setEnteredContactPhoneNumberIsValid(true);\n      return;\n    }\n\n    if (!enteredContactEmail.trim() === '') {\n      setEnteredContactEmailIsValid(true);\n      return;\n    }\n\n    setEnteredContactNameIsValid(false);\n    setEnteredContactPhoneNumberIsValid(false);\n    setEnteredContactEmailIsValid(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"row g-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contact Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      class: \"form-label\",\n      children: [\"Contact First & Last Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-control\",\n        type: \"text\",\n        value: enteredContactName,\n        onChange: contactNameChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), !enteredContactNameIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          'color': 'red'\n        },\n        children: \"Name must not be empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      class: \"form-label\",\n      children: [\"Contact Phone Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-control\",\n        type: \"tel\",\n        value: enteredContactPhoneNumber,\n        onChange: contactPhoneNumberChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), !enteredContactPhoneNumberIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          'color': 'red'\n        },\n        children: \"Name must not be empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      class: \"form-label\",\n      children: [\"Contact Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-control\",\n        type: \"email\",\n        value: enteredContactEmail,\n        onChange: contactEmailChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), !enteredContactEmailIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          'color': 'red'\n        },\n        children: \"Name must not be empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.prevPage,\n      children: \"Previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickHandler ? props.nextPage : undefined,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactInfo, \"nMOzP0Vxs5yvaJYf5ltuHoJNdLU=\");\n\n_c = ContactInfo;\nexport default ContactInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactInfo\");","map":{"version":3,"sources":["/Users/kharbaugh829/Documents/LaunchCode/FrontEndProject1/order-form/src/components/OrderForm/ContactInfo.js"],"names":["useState","ContactInfo","props","enteredContactName","setEnteredContactName","enteredContactPhoneNumber","setEnteredContactPhoneNumber","enteredContactEmail","setEnteredContactEmail","enteredContactNameIsValid","setEnteredContactNameIsValid","enteredContactPhoneNumberIsValid","setEnteredContactPhoneNumberIsValid","enteredContactEmailIsValid","setEnteredContactEmailIsValid","contactNameChangeHandler","event","name","target","value","update","enteredContactPhone","contactPhoneNumberChangeHandler","phone","contactEmailChangeHandler","email","onClickHandler","preventDefault","trim","prevPage","nextPage","undefined"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nconst ContactInfo = (props) => {\n  const [enteredContactName, setEnteredContactName] = useState(\"\");\n  const [enteredContactPhoneNumber, setEnteredContactPhoneNumber] =\n    useState(\"\");\n  const [enteredContactEmail, setEnteredContactEmail] = useState(\"\");\nconst [enteredContactNameIsValid, setEnteredContactNameIsValid] = useState(true);\nconst [enteredContactPhoneNumberIsValid, setEnteredContactPhoneNumberIsValid] = useState(true);\nconst [enteredContactEmailIsValid, setEnteredContactEmailIsValid] = useState(true);\n\nconst contactNameChangeHandler = (event) => {\n    let name = event.target.value;\n    setEnteredContactName(name);\n    props.update(\"contactInfo\", {\n      enteredContactName: name,\n      enteredContactEmail: enteredContactEmail,\n      enteredContactPhone: enteredContactPhoneNumber,\n    });\n  };\n  const contactPhoneNumberChangeHandler = (event) => {\n    let phone = event.target.value;\n    setEnteredContactPhoneNumber(phone);\n    props.update(\"contactInfo\", {\n      enteredContactName: enteredContactName,\n      enteredContactEmail: enteredContactEmail,\n      enteredContactPhone: phone,\n    });\n  };\n  const contactEmailChangeHandler = (event) => {\n    let email = event.target.value;\n    setEnteredContactEmail(email);\n    props.update(\"contactInfo\", {\n      enteredContactName: enteredContactName,\n      enteredContactEmail: email,\n      enteredContactPhone: enteredContactPhoneNumber,\n    });\n\n  \n  };\n\n  const onClickHandler = (event) => {\n    event.preventDefault();\n    if (!enteredContactName.trim() === ''){\n      setEnteredContactNameIsValid(true);\n      return;\n    }\n    if (!enteredContactPhoneNumber.trim() === ''){\n      setEnteredContactPhoneNumberIsValid(true);\n      return;\n    }\n    if (!enteredContactEmail.trim() === ''){\n      setEnteredContactEmailIsValid(true);\n      return;\n    }\n    setEnteredContactNameIsValid(false);\n    setEnteredContactPhoneNumberIsValid(false);\n    setEnteredContactEmailIsValid(false);\n\n  };\n  return (\n    <div class =\"row g-3\">\n      <h1>Contact Information</h1>\n\n      <label class = 'form-label'>\n        Contact First & Last Name\n        <input class ='form-control'\n          type=\"text\"\n          value={enteredContactName}\n          onChange={contactNameChangeHandler}\n          \n        />{!enteredContactNameIsValid && <p style={{'color':'red'}}>Name must not be empty!</p>}\n      </label>\n      <label class = 'form-label'>\n        Contact Phone Number\n        <input class ='form-control'\n          type=\"tel\"\n          value={enteredContactPhoneNumber}\n          onChange={contactPhoneNumberChangeHandler}\n          \n        />\n        {!enteredContactPhoneNumberIsValid && <p style={{'color':'red'}}>Name must not be empty!</p>}\n      \n      </label>\n      <label class = 'form-label'>\n        Contact Email\n        <input class ='form-control'\n          type=\"email\"\n          value={enteredContactEmail}\n          onChange={contactEmailChangeHandler}\n         \n        />\n        {!enteredContactEmailIsValid && <p style={{'color':'red'}}>Name must not be empty!</p>}\n      \n      </label>\n      <button onClick={props.prevPage}>Previous</button>\n      {/* <button\n        onClick={props.nextPage}\n        disabled={\n          enteredContactName === \"\" ||\n          enteredContactEmail === \"\" ||\n          enteredContactPhoneNumber === \"\"\n        }\n      > */}<button\n        onClick={onClickHandler ? props.nextPage : undefined}\n        \n      >\n        Next\n      </button>\n    </div>\n  );\n};\nexport default ContactInfo;\n"]},"metadata":{},"sourceType":"module"}